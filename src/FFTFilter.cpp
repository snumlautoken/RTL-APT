#include "FFTFilter.h"

const double filterVals[257] = {
       -4.95194261e-05, -1.28145567e-04, -1.84297773e-04, -2.07076836e-04,
       -1.91131624e-04, -1.37795833e-04, -5.51882187e-05,  4.28113973e-05,
        1.38636454e-04,  2.13910457e-04,  2.52716673e-04,  2.44731837e-04,
        1.87648782e-04,  8.83635940e-05, -3.74399132e-05, -1.67422789e-04,
       -2.76240049e-04, -3.40182247e-04, -3.42018842e-04, -2.75107624e-04,
       -1.45860247e-04,  2.61294700e-05,  2.10598342e-04,  3.71567775e-04,
        4.74011960e-04,  4.91072046e-04,  4.10397089e-04,  2.38208841e-04,
        3.16735826e-18, -2.62647038e-04, -4.98883365e-04, -6.58037260e-04,
       -7.00001934e-04, -6.04517404e-04, -3.77313562e-04, -5.15261301e-05,
        3.16380424e-04,  6.55883932e-04,  8.95462730e-04,  9.77112335e-04,
        8.69466971e-04,  5.76691883e-04,  1.40923096e-04, -3.62840129e-04,
       -8.39026647e-04, -1.18909149e-03, -1.33128419e-03, -1.21872945e-03,
       -8.51974355e-04, -2.82962246e-04,  3.91107645e-04,  1.04363399e-03,
        1.54176054e-03,  1.77270801e-03,  1.66819767e-03,  1.22185203e-03,
        4.95478670e-04, -3.87920747e-04, -1.26404804e-03, -1.95709803e-03,
       -2.31418890e-03, -2.23784136e-03, -1.70980869e-03, -8.00801435e-04,
        3.36912784e-04,  1.49382815e-03,  2.44081220e-03,  2.97344631e-03,
        2.95470169e-03,  2.34728371e-03,  1.22842229e-03, -2.17118291e-04,
       -1.72598420e-03, -3.00293420e-03, -3.77726246e-03, -3.85840246e-03,
       -3.17959483e-03, -1.82009601e-03, -1.19362013e-17,  1.95323622e-03,
        3.66193140e-03,  4.76934711e-03,  5.01180621e-03,  4.27759079e-03,
        2.64006932e-03,  3.56703468e-04, -2.16828962e-03, -4.45286607e-03,
       -6.02640054e-03, -6.52321109e-03, -5.76236798e-03, -3.79719977e-03,
       -9.22637363e-04,  2.36411487e-03,  5.44536723e-03,  7.69446611e-03,
        8.59767172e-03,  7.86362087e-03,  5.49832865e-03,  1.82866125e-03,
       -2.53421976e-03, -6.78916504e-03, -1.00837176e-02, -1.16744150e-02,
       -1.10801817e-02, -8.19939810e-03, -3.36571893e-03,  2.67290287e-03,
        8.85466410e-03,  1.39722757e-02,  1.68845733e-02,  1.67371290e-02,
        1.31534959e-02,  6.36108977e-03, -2.77547759e-03, -1.28267494e-02,
       -2.19724643e-02, -2.82558930e-02, -2.98823752e-02, -2.55165726e-02,
       -1.45307009e-02,  2.83845705e-03,  2.54532696e-02,  5.13712450e-02,
        7.80643838e-02,  1.02733358e-01,  1.22672401e-01,  1.35631893e-01,
        1.40124917e-01,  1.35631893e-01,  1.22672401e-01,  1.02733358e-01,
        7.80643838e-02,  5.13712450e-02,  2.54532696e-02,  2.83845705e-03,
       -1.45307009e-02, -2.55165726e-02, -2.98823752e-02, -2.82558930e-02,
       -2.19724643e-02, -1.28267494e-02, -2.77547759e-03,  6.36108977e-03,
        1.31534959e-02,  1.67371290e-02,  1.68845733e-02,  1.39722757e-02,
        8.85466410e-03,  2.67290287e-03, -3.36571893e-03, -8.19939810e-03,
       -1.10801817e-02, -1.16744150e-02, -1.00837176e-02, -6.78916504e-03,
       -2.53421976e-03,  1.82866125e-03,  5.49832865e-03,  7.86362087e-03,
        8.59767172e-03,  7.69446611e-03,  5.44536723e-03,  2.36411487e-03,
       -9.22637363e-04, -3.79719977e-03, -5.76236798e-03, -6.52321109e-03,
       -6.02640054e-03, -4.45286607e-03, -2.16828962e-03,  3.56703468e-04,
        2.64006932e-03,  4.27759079e-03,  5.01180621e-03,  4.76934711e-03,
        3.66193140e-03,  1.95323622e-03, -1.19362013e-17, -1.82009601e-03,
       -3.17959483e-03, -3.85840246e-03, -3.77726246e-03, -3.00293420e-03,
       -1.72598420e-03, -2.17118291e-04,  1.22842229e-03,  2.34728371e-03,
        2.95470169e-03,  2.97344631e-03,  2.44081220e-03,  1.49382815e-03,
        3.36912784e-04, -8.00801435e-04, -1.70980869e-03, -2.23784136e-03,
       -2.31418890e-03, -1.95709803e-03, -1.26404804e-03, -3.87920747e-04,
        4.95478670e-04,  1.22185203e-03,  1.66819767e-03,  1.77270801e-03,
        1.54176054e-03,  1.04363399e-03,  3.91107645e-04, -2.82962246e-04,
       -8.51974355e-04, -1.21872945e-03, -1.33128419e-03, -1.18909149e-03,
       -8.39026647e-04, -3.62840129e-04,  1.40923096e-04,  5.76691883e-04,
        8.69466971e-04,  9.77112335e-04,  8.95462730e-04,  6.55883932e-04,
        3.16380424e-04, -5.15261301e-05, -3.77313562e-04, -6.04517404e-04,
       -7.00001934e-04, -6.58037260e-04, -4.98883365e-04, -2.62647038e-04,
        3.16735826e-18,  2.38208841e-04,  4.10397089e-04,  4.91072046e-04,
        4.74011960e-04,  3.71567775e-04,  2.10598342e-04,  2.61294700e-05,
       -1.45860247e-04, -2.75107624e-04, -3.42018842e-04, -3.40182247e-04,
       -2.76240049e-04, -1.67422789e-04, -3.74399132e-05,  8.83635940e-05,
        1.87648782e-04,  2.44731837e-04,  2.52716673e-04,  2.13910457e-04,
        1.38636454e-04,  4.28113973e-05, -5.51882187e-05, -1.37795833e-04,
       -1.91131624e-04, -2.07076836e-04, -1.84297773e-04, -1.28145567e-04,
       -4.95194261e-05
       };

std::array<std::complex<double>, 2*ARR_SIZE> FFTFilter::filter(unsigned char input[ARR_SIZE*2]) {
    for (int i = 0; i < ARR_SIZE*2; i+=2) {
        sampleArr[i/2] = std::complex<double>(double(input[i])-127.5, double(input[i+1])-127.5);
        sampleArr[ARR_SIZE+i/2] = 0;
    }

    fftw_execute(p);

    for (int i = 0; i < ARR_SIZE*2; i++) {
        sampleArr[i] *= filterOut[i];
    }

    fftw_execute(ip);

    for (int i = 0; i < ARR_SIZE; i++) {
        sampleArr[i] /= ARR_SIZE*2;
    }

    return sampleArr;
}

FFTFilter::FFTFilter(unsigned int filterLength, int freqCutoff) 
: length(filterLength), cutoff(freqCutoff) {
    std::cout << "Initialize fft-filter" << std::endl;
    p  = fftw_plan_dft_1d(ARR_SIZE*2, reinterpret_cast<fftw_complex*>(&sampleArr[0]), reinterpret_cast<fftw_complex*>(&sampleArr[0]), FFTW_FORWARD, FFTW_MEASURE);
    ip = fftw_plan_dft_1d(ARR_SIZE*2, reinterpret_cast<fftw_complex*>(&sampleArr[0]), reinterpret_cast<fftw_complex*>(&sampleArr[0]), FFTW_BACKWARD, FFTW_MEASURE);

    std::array<double,2*ARR_SIZE> filterIn;
    fftw_plan fp = fftw_plan_dft_r2c_1d(ARR_SIZE*2, filterIn.data(), reinterpret_cast<fftw_complex*>(&filterOut[0]), FFTW_MEASURE);

    filterIn.fill(0.0);
    for (int i = 0; i < 257; i++) {
        filterIn[i] = filterVals[i];
    }

    fftw_execute(fp);

    fftw_destroy_plan(fp);
    std::cout << "Finish initializing fft-filter" << std::endl;
}
